{"version":3,"file":"index.es53.js","sources":["../src/providers/SkeletonConfigProvider.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport { SkeletonTheme } from 'react-loading-skeleton';\nimport useTheme from '../hooks/useTheme';\nimport { darkTheme, lightTheme } from '../styles/theme';\nimport 'react-loading-skeleton/dist/skeleton.css';\n/**\n * A global config provider for react-loading-skeleton\n *\n * @param {Object} props - Component props.\n * @param {ReactNode} props.children - The content to render within the skeleton wrapper.\n * @param {string} [props.baseColor] - The base color of the skeleton. Optional, can be overridden.\n * @param {string} [props.highlightColor] - The highlight color of the skeleton. Optional, can be overridden.\n */\nconst SkeletonConfigProvider = ({\n\tchildren,\n\tbaseColor,\n\thighlightColor,\n}: {\n\tchildren: ReactNode;\n\tbaseColor?: string;\n\thighlightColor?: string;\n}) => {\n\tconst cachedTheme = localStorage.getItem('theme');\n\tconst { theme } = useTheme();\n\n\t// use localstorage first to avoid flickers if toggling theme too quickly;\n\tconst currentTheme = cachedTheme ? cachedTheme : theme;\n\n\tconst { UI } = currentTheme === 'dark' ? darkTheme : lightTheme;\n\n\treturn (\n\t\t<SkeletonTheme baseColor={baseColor || '#000'} highlightColor={highlightColor || '#c9c9c9'}>\n\t\t\t{children}\n\t\t</SkeletonTheme>\n\t);\n};\n\nexport default SkeletonConfigProvider;\n"],"names":["SkeletonConfigProvider","children","baseColor","highlightColor","theme","useTheme","SkeletonTheme"],"mappings":";;;AAaA,MAAMA,IAAyB,CAAC;AAAA,EAC/B,UAAAC;AAAA,EACA,WAAAC;AAAA,EACA,gBAAAC;AACD,MAIM;AACe,eAAa,QAAQ,OAAO;AAC1C,QAAA,EAAE,OAAAC,EAAM,IAAIC,EAAS;AAQ1B,SAAA,sBAAA,cAACC,KAAc,WAAWJ,KAAa,QAAQ,gBAAgBC,KAAkB,aAC/EF,CACF;AAEF;"}